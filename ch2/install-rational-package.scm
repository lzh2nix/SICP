(define (install-rational-package)
  ;; internal procedures
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d)
    (cond ((number? n)
           (let ((g (gcd n d)))
             (cons (div n g) (div d g))))
           ((eq? 'polynomial (type-tag n))
            (cons n d))))

  (define (project content)
    (make-scheme-number (round (div (numer content) (denom content)))))

  (define (drop-from-rational content)
    (let ((proj (project content))
          (r (tag content)))
      (if (equ? r (raise proj))
          (drop proj)
          r)))
  (define (add-rat x y)
    (make-rat (add (mul (numer x) (denom y))
                 (mul (numer y) (denom x)))
              (mul (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (sub (sub (numer x) (denom y))
                 (mul (numer y) (denom x)))
              (mul (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (mul (numer x) (numer y))
              (mul (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (mul (numer x) (denom y))
              (mul (denom x) (numer y))))
  ;; interface to rest of the system
  (define (tag x) (attach-tag 'rational x))
  (put 'add '(rational rational)
       (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)
       (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational)
       (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)
       (lambda (x y) (tag (div-rat x y))))
  (put 'make 'rational
       (lambda (n d) (tag (make-rat n d))))
  (put 'raise '(rational)
       (lambda (n) (make-from-real-image (div (numer n) (denom n)) 0)))
  (put 'drop '(rational)
       drop-from-rational)
  (put 'eq  '(rational rational) (lambda (n1 n2) (equal? n1 n2)))
  (put 'zero '(rational) (lambda (x) (= 0 x)))
  (put-coercion 'rational 'complex
		(lambda (n) (make-from-real-image (div (numer (cadr n)) (denom (cadr n))) 0)))
'done)
