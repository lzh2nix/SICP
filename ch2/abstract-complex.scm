(define (make-from-real-imag-rectangular r i)
	(attach-tag 'rectangular (cons r i)))
(define (real-part-rectangular z)
	(car z))
(define (image-part-rectangular z)
	(cdr z))

(define (make-from-mag-ang-rectangular r a)
	(attach-tag 'rectangular (cons (* r (cons a)) ((* r (sin a))))))
(define (magnitude-rectangular z)
	(sqrt (+ (square (real-part-rectangular z)) (square (image-part-rectangular z)))))
(define (angle-rectangular z)
	(atan (image-part-rectangular z) (real-part-rectangular z)))
;------------------------
(define (real-part-polar z)
	(* (magnitude-polar z) (cos  (angle-polar z))))
(define (image-part-polar z)
	(* (magnitude-polar z) (sin (angle-polar z))))
(define (magnitude-polar z)
	(car z))
(define (angle-polar z)
	(cdr z))
(define (make-from-mag-ang-polar r a) (attach-tag 'polar (cons r a)))
(define (make-from-real-imag-polar x y)
	(attach-tag 'polar (cons (sqrt (+ (square x) (square y))) 
			(atan y x))))

(define (attach-tag type-tag contents)
	(cons type-tag contents))
(define (type-tag datum)
	(if (pair? datum)
		(car datum)
		(error "Bad tag type" datum)))
(define (contents datum)
	(if (pair? datum)
		(cdr datum)
		(error "Bad tag type" datum)))

(define (rectangular? z)
	(eq? (type-tag z) 'rectangular))
(define (polar? z)
	(eq? (type-tag z) 'polar))

(define (real-part z)
	(cond ((rectangular? z) (real-part-rectangular (contents z)))
			((polar? z) (real-part-polar (contents z)))
			(else
				(error "Unknow type ----REAL---PART" z))))
(define (image-part z)
	(cond ((rectangular? z) (image-part-rectangular (contents z)))
			((polar? z) (image-part-polar (contents z)))
			(else
				(error "Unknow type ----IMAGE---PART" z))))
(define (magnitude z)
	(cond ((rectangular? z) (magnitude-rectangular (contents z)))
			((polar? z) (magnitude-polar (contents z)))
			(else
				(error "Unknow type ----MAGNITUDE---PART" z))))
(define (angle z)
	(cond ((rectangular? z) (angle-rectangular (contents z)))
			((polar? z) (angle-polar (contents z)))
			(else
				(error "Unknow type ----ANGLE---PART" z))))

(define (add-complex z1 z2)
	(make-from-real-imag (+ (real-part z1) (real-part z2))
								(+ (image-part z1) (image-part z2))))

(define (sub-complex z1 z2)
	(make-from-real-imag (- (real-part z1) (real-part z2))
								(- (image-part z1) (image-part z2))))

(define (mul-complex z1 z2)
	(make-from-real-imag (* (magnitude z1) (magnitude z2))
								(+ (angle z1) (angle z2))))

(define (div-complex z1 z2)
	(make-from-real-imag (/ (magnitude z1) (magnitude z2))
								(- (angle z1) (angle z2))))
(define (make-from-real-imag r i)
	(make-from-real-imag-rectangular r i))
(define (make-from-mag-ang r a)
	(make-from-mag-ang-polar r a))
;test
(define r1 (make-from-real-imag 1 2))
(define r2 (make-from-mag-ang 3 4))
(add-complex r1 r2)
(sub-complex r1 r2)
(mul-complex r1 r2)
(div-complex r1 r2)
