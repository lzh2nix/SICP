(define (make-account balance password)
  (let ((count 0))
    (define (withdraw amount)
      (if (>= balance amount)
          (begin (set! balance (- balance amount))
                 (set! count 0)
                 balance)
          "Insufficient funds"))
    (define (desposit amount)
      (begin (set! balance (+ balance amount))
             (set! count 0)
             balance))
    (define (call-the-cops)
      (error "Call the cops AAAAAAAAAAAAAAA"))
    (define (add-count)
      (begin (set! count (+ count 1))
      (if (>= count 7)
          (call-the-cops)
          (error "increate passwrod"))))
    (define (dispatch n m)
      (if (eq? n password)
          (cond ((eq? m 'withdraw) withdraw)
                ((eq? m 'desposit) desposit)
                (else
                 (begin (set! count 0)
                        (error "Unknow request" m))))
          (add-count)))
  dispatch))

(define (make-joint acc origin-passwd new-passwd)
  (lambda (passwd operator)
    (if (eq? passwd new-passwd)
        (acc origin-passwd operator)
        (error "error passwd"))))
;test
(define paul-acc (make-account 100 'passwd))
(define peter-acc (make-joint paul-acc 'passwd 'reosebud))

((paul-acc 'passwd 'withdraw) 60)
((paul-acc 'passwd 'desposit) 40)
((paul-acc 'passwd 'desposit) 40)
((peter-acc 'reosebud 'desposit) 40)
((peter-acc 'reosebud 'withdraw) 40)
